on:
  push:
  releases:
    types:
      - created

name: Upload Musl release

jobs:
  build:
    name: Upload Release Asset
    env:
      PKG: tract-linux-x86_64.${{ github.ref }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          sudo apt-get install -y musl-dev
          rustup target add x86_64-unknown-linux-musl
          cargo build --target x86_64-unknown-linux-musl --release -p tract
          mkdir $PKG
          cp target/x86_64-unknown-linux-musl/release/tract $PKG
          tar czf $PKG.tgz $PKG
          #       - name: Create Release
          #         id: create_release
          #         uses: actions/create-release@v1
          #         env:
          #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #         with:
          #           tag_name: ${{ github.ref }}
          #           release_name: Release ${{ github.ref }}
          #           draft: false
          #           prerelease: false
          #       - name: Upload Release Asset
          #         id: upload-release-asset 
          #         uses: actions/upload-release-asset@v1
          #         env:
          #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #         with:
          #           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          #           asset_path: $PKG.tgz
          #           asset_name: $PKG.tgz
          #           asset_content_type: application/x-tgz
